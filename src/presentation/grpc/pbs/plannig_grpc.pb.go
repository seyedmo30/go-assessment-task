// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.30.2
// source: plannig.proto

package pbs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlanningServiceClient is the client API for PlanningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanningServiceClient interface {
	IsAvailable(ctx context.Context, in *AvailabilityInquiryRequest, opts ...grpc.CallOption) (*AvailabilityInquiryResponse, error)
	GetShortages(ctx context.Context, in *GetShortagesInquiryRequest, opts ...grpc.CallOption) (*GetShortagesInquiryResponse, error)
}

type planningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanningServiceClient(cc grpc.ClientConnInterface) PlanningServiceClient {
	return &planningServiceClient{cc}
}

func (c *planningServiceClient) IsAvailable(ctx context.Context, in *AvailabilityInquiryRequest, opts ...grpc.CallOption) (*AvailabilityInquiryResponse, error) {
	out := new(AvailabilityInquiryResponse)
	err := c.cc.Invoke(ctx, "/planning.PlanningService/IsAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planningServiceClient) GetShortages(ctx context.Context, in *GetShortagesInquiryRequest, opts ...grpc.CallOption) (*GetShortagesInquiryResponse, error) {
	out := new(GetShortagesInquiryResponse)
	err := c.cc.Invoke(ctx, "/planning.PlanningService/GetShortages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanningServiceServer is the server API for PlanningService service.
// All implementations should embed UnimplementedPlanningServiceServer
// for forward compatibility
type PlanningServiceServer interface {
	IsAvailable(context.Context, *AvailabilityInquiryRequest) (*AvailabilityInquiryResponse, error)
	GetShortages(context.Context, *GetShortagesInquiryRequest) (*GetShortagesInquiryResponse, error)
}

// UnimplementedPlanningServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPlanningServiceServer struct {
}

func (UnimplementedPlanningServiceServer) IsAvailable(context.Context, *AvailabilityInquiryRequest) (*AvailabilityInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAvailable not implemented")
}
func (UnimplementedPlanningServiceServer) GetShortages(context.Context, *GetShortagesInquiryRequest) (*GetShortagesInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortages not implemented")
}

// UnsafePlanningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanningServiceServer will
// result in compilation errors.
type UnsafePlanningServiceServer interface {
	mustEmbedUnimplementedPlanningServiceServer()
}

func RegisterPlanningServiceServer(s grpc.ServiceRegistrar, srv PlanningServiceServer) {
	s.RegisterService(&PlanningService_ServiceDesc, srv)
}

func _PlanningService_IsAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailabilityInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanningServiceServer).IsAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/planning.PlanningService/IsAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanningServiceServer).IsAvailable(ctx, req.(*AvailabilityInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanningService_GetShortages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortagesInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanningServiceServer).GetShortages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/planning.PlanningService/GetShortages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanningServiceServer).GetShortages(ctx, req.(*GetShortagesInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanningService_ServiceDesc is the grpc.ServiceDesc for PlanningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "planning.PlanningService",
	HandlerType: (*PlanningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAvailable",
			Handler:    _PlanningService_IsAvailable_Handler,
		},
		{
			MethodName: "GetShortages",
			Handler:    _PlanningService_GetShortages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plannig.proto",
}
